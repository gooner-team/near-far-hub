version: '3.8'

services:
  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
    depends_on:
      - backend
    networks:
      - api-network
    stdin_open: true
    tty: true

  # Laravel Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www/html
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=api
      - DB_USERNAME=root
      - DB_PASSWORD=secret
      - APP_ENV=local
      - APP_DEBUG=true
    depends_on:
      - mysql
    networks:
      - api-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: api-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: api
      MYSQL_USER: sail
      MYSQL_PASSWORD: secret
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - api-network

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: api-phpmyadmin
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: secret
    depends_on:
      - mysql
    networks:
      - api-network

  # Nginx (Optional - for production-like setup)
#  nginx:
#    image: nginx:alpine
#    container_name: api-nginx
#    ports:
#      - "80:80"
#    volumes:
#      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
#      - ./backend/public:/var/www/html/public
#    depends_on:
#      - frontend
#      - backend
#    networks:
#      - api-network

volumes:
  mysql_data:

networks:
  api-network:
    driver: bridge